====================================================================
在庫管理システム - 環境変数設定ファイル（.env）詳細設計書（改訂版）
====================================================================

■ 1. 画面概要
====================================================================
【機能名】
　環境変数設定ファイル（.env）

【機能ID】
　CONFIG_ENV_FILE

【アクセス権限】
　- 対象: システム管理者のみ
　- 認証: サーバー管理権限必須
　- 権限: ファイルシステムアクセス権限

【機能の位置づけ】
　在庫管理システムの基盤設定管理機能。システム全体の
　動作環境設定を一元管理し、セキュリティと運用性を確保する。

■ 2. 業務概要
====================================================================
【業務目的】
　1. システム実行環境の一元的設定管理
　2. データベース接続情報の安全な管理
　3. アプリケーション設定の環境別切り替え
　4. セキュリティ情報の適切な保護
　5. 運用環境とテスト環境の設定分離

【主要業務機能】
　1. データベース接続設定：DB サーバー・認証情報管理
　2. セキュリティ設定：暗号化キー・認証情報管理
　3. アプリケーション設定：機能固有設定の管理
　4. 環境分離：開発・テスト・本番環境の設定切り替え
　5. 設定変更管理：設定変更時の影響範囲制御

【業務上の重要性】
　- システム全体のセキュリティ確保
　- 運用環境の安定性維持
　- 設定変更時の影響最小化
　- 管理業務の効率化
　- 障害対応の迅速化

■ 3. 処理フロー
====================================================================
【3.1 システム起動時フロー】
　1. アプリケーション起動
　　　↓
　2. 環境変数ファイル(.env)読み込み試行
　　　├─ ファイル存在 → 設定値読み込み
　　　└─ ファイル無し → 直接環境変数参照
　　　　　　↓
　3. 必須設定値検証
　　　├─ 設定完了 → アプリケーション初期化継続
　　　└─ 設定不足 → エラー終了・設定確認要求

【3.2 設定読み込みフロー】
　1. 実行環境判定（開発/本番）
　　　├─ 開発環境 → プロジェクトルート.env読み込み
　　　└─ 本番環境 → 実行ファイル同階層.env読み込み
　　　　　　↓
　2. 設定項目別読み込み
　　　├─ DB設定（必須）→ 接続テスト実行
　　　├─ セキュリティ設定 → 暗号化処理準備
　　　└─ 機能設定（任意）→ デフォルト値適用
　　　　　　↓
　3. 設定値検証・アプリケーション設定反映

【3.3 設定変更時フロー】
　1. システム管理者による設定ファイル編集
　　　↓
　2. 設定値妥当性確認
　　　├─ DB接続情報 → 接続テスト実行
　　　├─ セキュリティ設定 → 暗号化強度確認
　　　└─ 機能設定 → 設定値範囲確認
　　　　　　↓
　3. アプリケーション再起動・設定反映確認

【3.4 エラー対応フロー】
　1. 設定読み込みエラー検知
　　　↓
　2. エラー種別判定
　　　├─ ファイル無し → 直接環境変数使用
　　　├─ 設定値不正 → エラーログ出力・管理者通知
　　　└─ 必須設定欠如 → システム停止・設定要求
　　　　　　↓
　3. 代替設定適用・運用継続可否判定

■ 4. 画面レイアウト
====================================================================
【4.1 設定ファイル構成例】
　┌─────────────────────────────────┐
　│ # 在庫管理システム環境設定            │
　│                                        │
　│ # データベース接続設定（必須）           │
　│ DB_SERVER=サーバー名                   │
　│ DB_NAME=データベース名                 │
　│ DB_USER=ユーザー名                    │
　│ DB_PASSWORD=パスワード                │
　│                                        │
　│ # セキュリティ設定（推奨）              │
　│ SECRET_KEY=暗号化キー                  │
　│                                        │
　│ # 機能設定（任意）                     │
　│ PROC_EXCEL_PATH=テンプレートパス       │
　└─────────────────────────────────┘

【4.2 設定管理対象】
　◆ データベース設定
　　- 接続サーバー情報
　　- 認証情報（ユーザー・パスワード）
　　- データベース名

　◆ セキュリティ設定
　　- セッション暗号化キー
　　- 認証関連設定

　◆ 機能設定
　　- Excelテンプレートパス
　　- 出力ファイル設定

■ 5. データ項目
====================================================================
【5.1 必須設定項目】

◆ DB_SERVER
　- 用途: データベースサーバー接続先
　- 設定例: localhost, 192.168.1.100
　- 影響範囲: システム全体のデータアクセス
　- エラー時影響: システム起動不可

◆ DB_NAME
　- 用途: 接続対象データベース名
　- 設定例: BF_ZAIKO_DB
　- 影響範囲: データベース操作全般
　- エラー時影響: データアクセス不可

◆ DB_USER
　- 用途: データベース接続ユーザー名
　- 設定例: bf_user
　- 影響範囲: データベース認証
　- エラー時影響: 認証失敗・接続不可

◆ DB_PASSWORD
　- 用途: データベース接続パスワード
　- セキュリティ: 暗号化推奨
　- 影響範囲: データベース認証
　- エラー時影響: 認証失敗・接続不可

【5.2 任意設定項目】

◆ SECRET_KEY
　- 用途: Flask セッション暗号化キー
　- デフォルト値: 開発用固定キー
　- 推奨: 本番環境では独自キー設定
　- 影響範囲: セッション管理・認証

◆ PROC_EXCEL_PATH
　- 用途: Excel出力テンプレートファイルパス
　- 必要時: Excel出荷機能使用時のみ
　- 影響範囲: Excel出力機能
　- エラー時影響: Excel出力機能無効化

【5.3 環境別設定】
　- 開発環境: 開発用データベース・デバッグ設定
　- テスト環境: テスト用データベース・検証設定
　- 本番環境: 本番データベース・セキュリティ強化設定

■ 6. 業務ルール
====================================================================
【6.1 設定管理ルール】
　1. 設定変更権限
　　- システム管理者のみ設定変更可能
　　- 変更時は事前影響範囲確認必須

　2. セキュリティルール
　　- パスワード等機密情報の暗号化推奨
　　- 設定ファイルのアクセス権限制限
　　- バージョン管理システムへの機密情報登録禁止

【6.2 設定検証ルール】
　1. 必須項目チェック
　　- データベース接続4項目の設定確認
　　- 設定欠如時のシステム起動停止

　2. 接続テストルール
　　- データベース設定変更時の接続確認
　　- 接続失敗時の設定見直し要求

【6.3 運用ルール】
　1. 設定変更時の手順
　　- 事前バックアップ取得
　　- 段階的変更・動作確認
　　- 問題発生時の即座復旧

　2. 環境別管理
　　- 開発・テスト・本番環境の設定分離
　　- 環境間設定の誤適用防止

■ 7. エラーハンドリング
====================================================================
【7.1 設定ファイルエラー】
　- ファイル不存在：直接環境変数参照・警告表示
　- ファイル読み込み失敗：権限確認・ファイル修復
　- 形式エラー：設定形式確認・サンプル提供

【7.2 設定値エラー】
　- 必須項目欠如：エラーメッセージ・設定要求
　- データベース接続失敗：接続情報確認・ネットワーク確認
　- 不正設定値：設定値範囲確認・修正要求

【7.3 セキュリティエラー】
　- 機密情報露出：アクセス権限確認・ファイル保護強化
　- 不正アクセス：アクセスログ確認・セキュリティ強化
　- 暗号化失敗：キー設定確認・暗号化処理見直し

【7.4 運用エラー対策】
　- 設定バックアップ：定期的設定保存・復旧手順整備
　- 監視・アラート：設定変更検知・管理者通知
　- 緊急時対応：最小限設定での運用継続

■ 8. 関連ファイル・関数
====================================================================
【8.1 設定ファイル】
　◆ 主要ファイル
　　- .env：環境変数設定ファイル（現在は不存在）
　　- .env.example：設定例・テンプレートファイル（推奨）

　◆ セキュリティ関連
　　- .gitignore：設定ファイル除外設定（要追加）
　　- アクセス権限設定：ファイルシステムレベル保護

【8.2 設定読み込み関連ファイル・関数】
　◆ データベース設定読み込み（app/database.py）
　　- load_dotenv()：環境変数ファイル読み込み
　　- os.getenv()：個別設定値取得
　　- 必須設定検証：設定完全性チェック

　◆ アプリケーション設定（app/__init__.py）
　　- app.config['SECRET_KEY']：Flask設定適用
　　- 環境変数デフォルト値処理

　◆ 機能別設定読み込み（app/export_excel.py）
　　- PROC_EXCEL_PATH取得：Excel機能設定
　　- ファイル存在確認：設定値検証

【8.3 設定検証関数】
　◆ データベース接続確認
　　- get_db_session()：接続テスト実行
　　- 接続エラーハンドリング

　◆ 設定値検証
　　- 必須項目存在確認：all([server, database, username, password])
　　- ファイルパス検証：os.path.exists()

【8.4 環境変数使用箇所】
　◆ 直接参照ファイル
　　- app/database.py：DB接続情報読み込み
　　- app/__init__.py：Flask設定読み込み
　　- app/export_excel.py：Excel設定読み込み
　　- create_user.py：環境変数読み込み

　◆ 設定管理パターン
　　- PyInstaller対応：実行形式別設定パス
　　- デフォルト値処理：設定欠如時の代替値
　　- エラーハンドリング：設定不備時の適切な処理

【8.5 関連運用ツール】
　◆ 設定管理ツール（推奨）
　　- 設定バックアップスクリプト
　　- 環境別設定切り替えツール
　　- 設定値検証ツール

　◆ セキュリティ確保
　　- ファイル暗号化ツール（機密情報保護）
　　- アクセス権限管理
　　- 設定変更監視ツール