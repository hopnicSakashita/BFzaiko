====================================================================
在庫管理システム - 受注データ入力画面 詳細設計書（改訂版）
====================================================================

■ 1. 画面概要
====================================================================
【画面名】
　受注データ入力画面

【画面目的】
　眼鏡レンズの受注データを新規登録または既存データを更新する。
　出荷先・受注日・客先注文番号・加工種別を指定して、
　製品ごとの受注数量を入力・管理する。

【アクセス情報】
　- URL: /order_input
　- HTTP メソッド: GET, POST
　- 認証: 必須 (@login_required)

■ 2. 業務概要
====================================================================
【主要業務】
　1. 受注ヘッダー情報の入力（出荷先、受注日、客先注文番号、加工種別）
　2. 既存受注データの検索・表示
　3. 製品別受注数量の入力・編集
　4. 受注データの新規登録・更新
　5. 画面状態の動的制御（入力可/不可の切り替え）

【業務上の重要性】
　- 受注から出荷までの業務フローの起点となる重要な画面
　- 在庫管理と出荷計画の基礎となる受注データの正確な入力
　- 取引先別・加工種別での受注管理による効率的な業務運営

【重要な業務ルール】
　- 同一の受注条件（出荷先+受注日+客先注文番号+加工種別）は1件のみ
　- 既存データがある場合は上書き更新
　- 数量が0の製品は登録対象外
　- 出荷先ID=1（内部用）は選択不可

■ 3. 処理フロー
====================================================================
【3.1 メイン処理フロー】
```
1. 画面アクセス（/order_input）
　　↓
2. 認証チェック（@login_required）
　　↓
3. order_input()関数実行
　　↓
4. マスタデータ取得
　　├─ BZTR_MST取得（出荷先一覧）
　　└─ BFSP_MST取得（製品一覧）
　　↓
5. GET: テンプレートレンダリング（初期表示）
   POST: フォームデータ処理
　　↓
6. ヘッダー入力 → 「表示」ボタンクリック
　　↓
7. /api/orders/search API呼び出し（BrcpDat.search実行）
　　↓
8. 既存データ検索・表示
　　↓
9. 数量入力 → 「登録」ボタンクリック
　　↓
10. /api/orders/save API呼び出し（BrcpDat.save実行）
　　↓
11. データベース保存・トランザクション制御
```

【3.2 既存データ検索処理フロー】
```
BrcpDat.search() 内部処理:
1. 入力データ検証
　　↓
2. 既存データ検索SQL実行
　　- BRCP_DATテーブルから該当データを取得
　　- 検索条件: 受注日+客先注文番号+加工種別+出荷先
　　↓
3. 検索結果処理
　　├─ exists: 既存データ有無判定
　　└─ details: 製品別数量データリスト
```

【3.3 受注データ保存処理フロー】
```
BrcpDat.save() 内部処理:
1. トランザクション開始
　　↓
2. 製品別保存処理ループ
　　├─ 既存データ確認
　　├─ 出荷済みチェック（dbo.Get_ODR_ZAN_Qty_BF使用）
　　└─ データ更新分岐処理
　　↓
3. 更新分岐
　　├─ 既存データ+数量>0: UPDATE処理
　　├─ 既存データ+数量=0: DELETE処理
　　├─ 新規データ+数量>0: INSERT処理
　　└─ 新規データ+数量=0: 処理対象外
　　↓
4. トランザクション制御（commit/rollback）
```

■ 4. 画面レイアウト
====================================================================
【4.1 画面構造】
```
├── base.html（共通テンプレート）
│   ├── ヘッダー（ナビゲーション）
│   ├── サイドメニュー
│   └── メインコンテンツエリア
│       └── order_input.html
│           ├── ページタイトル「受注データ入力」
│           ├── ヘッダーセクション
│           │   ├── 受注情報入力欄（2列レイアウト）
│           │   └── 操作ボタン群
│           └── 明細セクション
│               └── 製品・数量入力テーブル
```

【4.2 ヘッダーセクション】
```
┌─────────────────────────────────────────────────────────────┐
│                     受注データ入力                          │
├─────────────────────┬───────────────────────────────────────┤
│ 出荷先： [▼コロンバス ] │ 客先注文番号： [_______________]    │
│ 受注日： [2024-01-15_] │ 加工：        [▼ノンコート___]    │
├─────────────────────┴───────────────────────────────────────┤
│ [表示] [キャンセル] [登録]                                  │
└─────────────────────────────────────────────────────────────┘
```

【4.3 明細セクション】
```
┌─────────────────────────────────────────────────────────────┐
│ 製品ID │ベース│加入度数│ L/R │ 色  │ 数量      │
├────────┼──────┼────────┼─────┼─────┼───────────┤
│ 1001L  │  1   │  150   │  L  │ CL  │ [___10] │
│ 1001R  │  1   │  150   │  R  │ CL  │ [____0] │
│ ...    │ ...  │  ...   │ ... │ ... │ [.....] │
└────────┴──────┴────────┴─────┴─────┴───────────┘
```

■ 5. データ項目
====================================================================
【5.1 ヘッダー項目】

◆ 出荷先
　- 項目ID: shipTo
　- データソース: BZTR_MST.BZTR_ID, BZTR_NM
　- データ型: INTEGER
　- 入力方式: セレクトボックス
　- 必須/任意: 必須
　- 選択条件: BZTR_ID != 1　加工は除く

◆ 受注日
　- 項目ID: orderDate
　- データ型: DATE
　- 入力方式: 日付入力フィールド
　- 必須/任意: 必須
　- フォーマット: YYYY-MM-DD
　- 初期値: 当日（システム日付）

◆ 客先注文番号
　- 項目ID: customerOrderNo
　- データ型: VARCHAR(50)
　- 入力方式: テキスト入力
　- 必須/任意: 必須
　- 最大文字数: 50文字

◆ 加工
　- 項目ID: process
　- データ型: INTEGER
　- 入力方式: セレクトボックス
　- 必須/任意: 必須
　- 選択肢: 0:ノンコート、1:ハードコート
　- 初期値: 0（ノンコート）

【5.2 明細項目】

◆ 製品ID〜色
　- データソース: BFSP_MST（BF規格マスタ）
　- 表示形式: 読み取り専用

◆ 数量
　- 項目ID: qty-input（クラス名）
　- データ型: INTEGER
　- 入力方式: 数値入力フィールド
　- 必須/任意: 任意（0の場合は保存対象外）
　- 最小値: 0
　- 最大値: 99999
　- 初期値: 0

■ 6. 業務ルール
====================================================================
【6.1 受注データ業務ルール】
　- 同一受注条件（出荷先+受注日+客先注文番号+加工種別）での重複制御
　- 出荷済み受注データの変更制限（ZAN_QTY != BRCP_QTY時エラー）
　- 数量0のデータ自動削除（DELETE処理）
　- dbo.Get_ODR_ZAN_Qty_BF関数による受注残数量計算
　- 出荷先ID=1（加工）は選択対象外

【6.2 トランザクション制御ルール】
　- session.begin()による明示的トランザクション開始
　- 全製品データ一括保存（詳細ループ処理）
　- エラー時のsession.rollback()自動実行
　- finally節によるsession.close()保証
　- 成功時のsession.commit()実行

【6.3 データ更新制御】
　- 出荷済みチェック: 「既に出荷された受注データは変更できません。」
　- 既存データ + 数量>0: UPDATE処理
　- 既存データ + 数量=0: DELETE処理
　- 新規データ + 数量>0: INSERT処理
　- 新規データ + 数量=0: 処理対象外

【6.4 データ整合性】
　- 受注残数量の自動計算・表示
　- 製品マスタとの整合性チェック
　- 出荷済み受注データの数量変更制限

■ 7. エラーハンドリング
====================================================================
【7.1 入力検証エラー】
　- 必須項目未入力: 適切なバリデーションメッセージ表示
　- 数量範囲チェック: 0以上99999以下の値のみ受付
　- 出荷先選択制限: ID=1（加工）は選択不可

【7.2 業務ルールエラー】
　- 出荷済みデータ変更制限: 「既に出荷された受注データは変更できません。」
　- 重複受注チェック: 同一受注条件での制御

【7.3 システムエラー】
　- データベースエラー時のlog_error記録
　- API層でのエラーレスポンス統一
　- return {'error': str(e)}形式でのエラー返却
　- 画面表示エラー時のredirect(url_for('index'))
　- データベースセッション管理エラーの finally 制御

■ 8. 関連ファイル・関数
====================================================================
【8.1 主要ファイル・関数】

◆ ルーティング
　- ファイル: app/routes.py
　- 関数: order_input(), search_order(), save_order()
　- 機能: 受注データ入力画面の表示制御とAPI処理
　- 認証: @login_required デコレータ

◆ データ処理モデル
　- ファイル: app/models.py
　- クラス: BrcpDat
　- 関数: search(), save()
　- 機能: 受注データの検索・保存業務ロジック
　- 呼び出し元: routes.py の search_order(), save_order()

◆ テンプレート
　- ファイル: app/templates/order_input.html
　- 機能: 受注データ入力画面のHTML表示
　- 継承: base.html

◆ 重要業務関数
　- 関数: dbo.Get_ODR_ZAN_Qty_BF()
　- 機能: 受注残数量計算（受注数量 - 出荷済み数量）
　- 用途: 出荷済みデータ変更制限判定

◆ エラーログ
　- ファイル: app/models.py
　- 関数: log_error()
　- 機能: 統一エラーログ記録

【8.2 データベーステーブル】

◆ BRCP_DAT（受注データテーブル）
　- 主要項目: BRCP_DT, BRCP_PRD_ID, BRCP_PROC, BRCP_ORDER_NO, BRCP_ORDER_CMP, BRCP_QTY, BRCP_FLG
　- 業務用途: 受注データの格納・管理

◆ BZTR_MST（取引先マスタテーブル）
　- 主要項目: BZTR_ID, BZTR_NM
　- 業務用途: 出荷先選択肢の提供

◆ BFSP_MST（BF規格マスタテーブル）
　- 主要項目: BFSP_PRD_ID, BFSP_BASE, BFSP_ADP, BFSP_LR, BFSP_CLR, BFSP_SORT
　- 業務用途: 製品情報の表示

【8.3 関連画面・機能】
　- トップページ（index）: 受注残サマリ表示（BrcpDat.get_order_summary）
　- 受注データ検索画面: 受注データ一覧・検索機能
　- 出荷作成画面: 受注データベースの出荷データ作成
