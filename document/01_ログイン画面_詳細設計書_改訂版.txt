====================================================================
在庫管理システム - ログイン画面 詳細設計書（改訂版）
====================================================================

■ 1. 画面概要
====================================================================
【画面名】
　ログイン画面

【画面目的】
　USER_MSTテーブルベースのユーザー認証・ログイン処理・セッション管理機能を提供し、
　セキュアなアクセス制御とユーザー識別を実現する。

【アクセス情報】
　- URL: /auth/login
　- HTTP メソッド: GET, POST
　- 認証: 不要（未ログイン時のエントリーポイント）

■ 2. 業務概要
====================================================================
【主要業務】
　1. USER_MSTテーブルベースのユーザー認証機能
　2. セッション管理機能（ログイン状態の維持）
　3. 自動リダイレクト機能（既ログイン時のトップページ遷移）
　4. エラーハンドリング機能（認証失敗時のエラー表示）
　5. パスワードハッシュ化認証（check_password_hash使用）

【認証仕様】
　- 認証方式: USER_MSTテーブルベース認証
　- 認証データソース: USER_MST.USER_ID, USER_MST.USER_PW（ハッシュ化）
　- パスワード検証: check_password_hash関数使用
　- セッション情報: session['user_id'], session['user_name']
　- エラーログ: log_error関数によるエラー記録

【業務上の重要性】
　- システム全体のセキュリティ制御の入口
　- 全ての業務画面へのアクセス制御基盤
　- ユーザー識別によるトレーサビリティ確保

■ 3. 処理フロー
====================================================================
【3.1 メイン処理フロー】
```
1. 画面アクセス（/auth/login）
　　↓
2. 既ログイン状態チェック（session['user_id']の存在確認）
　　↓
3. 既ログイン時：トップページにリダイレクト
   未ログイン時：ログインフォーム表示
　　↓
4. GET：初期表示処理
   POST：認証処理実行
　　↓
5. 認証成功時：セッション設定 → トップページリダイレクト
   認証失敗時：エラーメッセージ表示 → ログイン画面表示
```

【3.2 ユーザー認証処理詳細】
```
1. 入力値取得・必須チェック
　　├─ user_id = request.form.get('user_id')
　　├─ password = request.form.get('password')
　　└─ 未入力時：「ユーザーIDとパスワードを入力してください。」

2. USER_MST認証処理（verify_user関数）
　　├─ USER_MSTテーブル検索
　　├─ パスワード検証: check_password_hash(result.USER_PW, password)
　　└─ 認証成功時：{'user_id': result.USER_ID, 'user_name': result.USER_NM}

3. セッション設定処理
　　├─ session['user_id'] = user['user_id']
　　├─ session['user_name'] = user['user_name']
　　└─ flash('ログインしました。', 'success')
```

【3.3 ログアウト処理フロー】
```
1. 認証チェック（@login_required）
　　↓
2. セッションクリア処理（session.clear()実行）
　　↓
3. flash('ログアウトしました。', 'success')
　　↓
4. ログイン画面にリダイレクト
```

■ 4. 画面レイアウト
====================================================================
【4.1 画面構造】
```
├── base.html（認証不要版の共通テンプレート）
│   └── メインコンテンツエリア
│       └── login.html
│           ├── システムタイトル「在庫管理システム」
│           ├── ログインフォーム
│           │   ├── ユーザー名入力フィールド
│           │   ├── パスワード入力フィールド
│           │   └── ログインボタン
│           └── エラーメッセージ表示エリア
```

【4.2 ログインフォーム】
```
┌─────────────────────────────────────────────┐
│          在庫管理システム                 │
│                                             │
│  ┌─────────────────────────────────────┐   │
│  │         ログイン                    │   │
│  ├─────────────────────────────────────┤   │
│  │ ユーザー名                          │   │
│  │ [____________________]              │   │
│  │                                     │   │
│  │ パスワード                          │   │
│  │ [____________________]              │   │
│  │                                     │   │
│  │        [ログイン]                   │   │
│  └─────────────────────────────────────┘   │
│                                             │
│  ※エラーメッセージ表示領域※                │
└─────────────────────────────────────────────┘
```

■ 5. データ項目
====================================================================
【5.1 入力項目】

◆ ユーザーID
　- 項目名: user_id
　- 表示名: ユーザーID
　- データソース: USER_MST.USER_ID
　- データ型: VARCHAR(10)
　- 入力方式: テキスト入力フィールド
　- 必須/任意: 必須
　- バリデーション: 必須入力チェック

◆ パスワード
　- 項目名: password
　- 表示名: パスワード
　- データソース: USER_MST.USER_PW（ハッシュ化済み）
　- データ型: VARCHAR
　- 入力方式: パスワード入力フィールド
　- 必須/任意: 必須
　- 検証方式: check_password_hash関数使用

【5.2 セッション情報】

◆ ユーザーID
　- セッションキー: session['user_id']
　- データソース: USER_MST.USER_ID
　- データ型: VARCHAR

◆ ユーザー名
　- セッションキー: session['user_name']
　- データソース: USER_MST.USER_NM
　- データ型: VARCHAR

■ 6. 業務ルール
====================================================================
【6.1 認証業務ルール】
　- USER_MSTテーブルベース認証（単一ユーザーソース）
　- check_password_hash関数によるハッシュ化パスワード検証
　- session['user_id']、session['user_name']によるセッション管理
　- 既ログイン時の自動リダイレクト（トップページ）
　- @login_requiredデコレータによる全画面認証制御

【6.2 セッション管理ルール】
　- session['user_id']の存在確認による認証状態判定
　- session.clear()による完全セッションクリア（ログアウト時）
　- セッション情報はログイン成功時に設定
　- 全業務画面で@login_requiredによる認証制御

【6.3 認証制御ルール】
　- login_required認証制御による未ログイン時のリダイレクト
　- 未ログイン判定時：flash('ログインが必要です。', 'warning')
　- 認証済み判定時：元の関数実行を継続

■ 7. エラーハンドリング
====================================================================
【7.1 認証エラーパターン】
　- 入力不備: 「ユーザーIDとパスワードを入力してください。」
　- 認証失敗: 「ユーザーIDまたはパスワードが正しくありません。」
　- 未ログイン: 「ログインが必要です。」（警告レベル）
　- 認証エラー: 「認証エラー: [エラー詳細]」
　- ログイン処理エラー: 「ログイン処理でエラーが発生しました: [エラー詳細]」
　- ログアウト処理エラー: 「ログアウト処理でエラーが発生しました: [エラー詳細]」

【7.2 エラーハンドリング業務ルール】
　- log_error関数による全エラーログ記録
　- traceback.format_exc()による詳細エラー情報取得
　- flash機能による利用者向けエラーメッセージ表示
　- データベースエラー時のユーザー向けエラーメッセージ表示

【7.3 成功メッセージ】
　- ログイン成功: 「ログインしました。」
　- ログアウト成功: 「ログアウトしました。」

■ 8. 関連ファイル・関数
====================================================================
【8.1 主要ファイル・関数】

◆ ルーティング
　- ファイル: app/auth_routes.py
　- 関数: login(), logout()
　- 機能: ログイン・ログアウトルーティング
　- 認証: login()は認証不要、logout()は@login_required

◆ 認証処理
　- ファイル: app/auth.py
　- 関数: verify_user(), login_required()
　- 機能: USER_MST認証処理、login_required制御

◆ テンプレート
　- ファイル: app/templates/login.html
　- 機能: ログイン画面テンプレート
　- 継承: base.html（認証不要版）

◆ エラーログ
　- ファイル: app/models.py
　- 関数: log_error()
　- 機能: 統一エラーログ記録

【8.2 データベーステーブル】

◆ USER_MST（ユーザーマスタテーブル）
　- USER_ID: ユーザーID（主キー）
　- USER_NM: ユーザー名（表示用）
　- USER_PW: パスワード（ハッシュ化済み）
　- USER_FLG: ユーザー状態フラグ

【8.3 関連画面・機能】
　- トップページ（index）: ログイン成功後のリダイレクト先
　- 全業務画面: @login_requiredによる認証制御
　- エラーログ機能: log_error関数による統一エラー記録 