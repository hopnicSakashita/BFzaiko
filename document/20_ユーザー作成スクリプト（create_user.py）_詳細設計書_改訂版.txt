====================================================================
在庫管理システム - ユーザー作成スクリプト（create_user.py）詳細設計書（改訂版）
====================================================================

■ 1. 画面概要
====================================================================
【機能名】
　ユーザー作成スクリプト（create_user.py）

【機能ID】
　SCRIPT_CREATE_USER

【アクセス権限】
　- 対象: システム管理者のみ
　- 認証: サーバーアクセス権限必須
　- 権限: コマンドライン実行権限・データベース操作権限

【機能の位置づけ】
　在庫管理システムのユーザー管理基盤機能。システム管理者が
　コマンドラインからユーザーアカウントを安全に作成・管理する。

■ 2. 業務概要
====================================================================
【業務目的】
　1. システム利用者アカウントの安全な作成・管理
　2. パスワード暗号化によるセキュリティ確保
　3. ユーザー情報の一元的データベース管理
　4. 管理者による効率的なユーザー管理作業
　5. 新規導入時・人事異動時の迅速なアカウント対応

【主要業務機能】
　1. 新規ユーザー作成：ID・名前・パスワード設定
　2. 既存ユーザー更新：情報変更・パスワード変更
　3. パスワード暗号化：セキュリティ強化された保存
　4. 重複チェック：既存ユーザーとの競合回避
　5. 標準ユーザー作成：システム標準アカウント準備

【業務上の重要性】
　- システムアクセス管理の基盤
　- セキュリティポリシーの遵守
　- ユーザー管理作業の効率化
　- 新規利用者の迅速な対応
　- システム運用の安定性確保

■ 3. 処理フロー
====================================================================
【3.1 メインフロー】
　1. コマンドライン実行・パラメータ取得
　　　├─ 引数指定 → 直接ユーザー作成実行
　　　└─ 引数不足 → インタラクティブ入力モード
　　　　　　↓
　2. ユーザー情報入力・検証
　　　↓
　3. データベース接続・既存ユーザー確認
　　　├─ 新規ユーザー → 新規作成処理
　　　└─ 既存ユーザー → 上書き確認・更新処理
　　　　　　↓
　4. パスワード暗号化・データベース保存
　　　↓
　5. 追加ユーザー作成確認・完了処理

【3.2 ユーザー情報入力フロー】
　1. 入力方式判定
　　　├─ コマンドライン引数 → 引数から情報取得
　　　└─ インタラクティブ → 対話形式入力
　　　　　　↓
　2. 必須情報入力
　　　├─ ユーザーID入力・形式チェック
　　　├─ ユーザー名入力・文字数チェック
　　　└─ パスワード入力・強度確認
　　　　　　↓
　3. 入力値検証・次処理移行

【3.3 データベース処理フロー】
　1. データベースセッション取得
　　　↓
　2. 既存ユーザー存在確認
　　　├─ ユーザー存在 → 上書き警告・継続確認
　　　└─ ユーザー不存在 → 新規作成準備
　　　　　　↓
　3. パスワード暗号化処理
　　　↓
　4. データベース更新実行
　　　├─ INSERT：新規ユーザー作成
　　　└─ UPDATE：既存ユーザー更新
　　　　　　↓
　5. トランザクションコミット・結果確認

【3.4 追加ユーザー作成フロー】
　1. メインユーザー作成完了
　　　↓
　2. 追加作成確認（user1, guest）
　　　├─ 作成希望あり → 標準ユーザー作成処理
　　　└─ 作成不要 → 処理完了
　　　　　　↓
　3. 標準ユーザー選択・個別作成確認
　　　↓
　4. 選択ユーザーの作成実行・完了通知

■ 4. 画面レイアウト
====================================================================
【4.1 コマンドライン実行例】
　┌─────────────────────────────────┐
　│ $ python create_user.py admin 管理者 admin123 │
　│ ユーザー 'admin' を正常に登録しました。        │
　│                                             │
　│ 他のユーザーも作成しますか？(y/n): y         │
　│ user1（一般ユーザー1）を作成しますか？(y/n): y │
　│ ユーザー 'user1' を正常に登録しました。       │
　│ guest（ゲストユーザー）を作成しますか？(y/n): n │
　│ 処理が完了しました。                        │
　└─────────────────────────────────┘

【4.2 インタラクティブ実行例】
　┌─────────────────────────────────┐
　│ $ python create_user.py                    │
　│ 使用方法: python create_user.py <ユーザーID> │
　│ 例: python create_user.py admin 管理者      │
　│                                             │
　│ ユーザーID: admin                           │
　│ ユーザー名: 管理者                         │
　│ パスワード: [入力非表示]                    │
　│                                             │
　│ ユーザー 'admin' を正常に登録しました。       │
　└─────────────────────────────────┘

【4.3 エラー表示例】
　┌─────────────────────────────────┐
　│ 警告: ユーザーID 'admin' は既に存在します。  │
　│ 上書きします。                             │
　│ ユーザー 'admin' を正常に登録しました。      │
　│                                             │
　│ エラーが発生しました: データベース接続失敗   │
　└─────────────────────────────────┘

■ 5. データ項目
====================================================================
【5.1 入力データ項目】

◆ ユーザーID（user_id）
　- 用途: システム内ユーザー一意識別子
　- 制約: 最大20文字・英数字推奨
　- 必須性: 必須項目
　- 検証: 重複チェック・形式確認

◆ ユーザー名（username）
　- 用途: 画面表示・管理用ユーザー名
　- 制約: 最大50文字・日本語対応
　- 必須性: 必須項目
　- 検証: 文字数制限確認

◆ パスワード（password）
　- 用途: ログイン認証用パスワード
　- 形式: 平文入力・暗号化保存
　- 必須性: 必須項目
　- セキュリティ: ハッシュ化処理

【5.2 データベース保存項目】

◆ USER_ID
　- テーブル項目: USER_MST.USER_ID
　- データ型: varchar(20)
　- 制約: PRIMARY KEY・NOT NULL
　- 用途: ユーザー主キー

◆ USER_NM
　- テーブル項目: USER_MST.USER_NM
　- データ型: nvarchar(50)
　- 制約: NOT NULL
　- 用途: ユーザー表示名

◆ USER_PW
　- テーブル項目: USER_MST.USER_PW
　- データ型: varchar(255)
　- 制約: NOT NULL
　- 用途: 暗号化パスワード保存

◆ USER_FLG
　- テーブル項目: USER_MST.USER_FLG
　- データ型: decimal(1)
　- 固定値: 0（有効ユーザー）
　- 用途: ユーザー状態管理

【5.3 標準ユーザー設定】
　- user1: 一般ユーザー1・パスワード「user123」
　- guest: ゲストユーザー・パスワード「guest123」

■ 6. 業務ルール
====================================================================
【6.1 ユーザー作成ルール】
　1. ユーザーID重複ルール
　　- 同一ID存在時は上書き警告表示
　　- 管理者判断での上書き許可
　　- 元情報の完全置換

　2. パスワード管理ルール
　　- 平文パスワードの即座暗号化
　　- ハッシュ化アルゴリズムによる保護
　　- 元パスワードの非保存

【6.2 セキュリティルール】
　1. アクセス制御
　　- システム管理者のみ実行権限
　　- データベース操作権限必須
　　- コマンドライン履歴からのパスワード除外推奨

　2. データ保護
　　- パスワードハッシュ化必須
　　- 機密情報の適切な取り扱い
　　- 不正アクセス防止

【6.3 運用ルール】
　1. ユーザー管理手順
　　- 新規利用者申請時のアカウント作成
　　- 定期的なパスワード変更対応
　　- 退職者アカウントの無効化

　2. 標準アカウント管理
　　- システム標準ユーザーの適切な管理
　　- デモ・テスト用アカウントの運用
　　- 不要アカウントの定期的見直し

■ 7. エラーハンドリング
====================================================================
【7.1 入力エラー】
　- 引数不足：使用方法表示・インタラクティブ入力誘導
　- 不正文字：文字制限確認・再入力要求
　- 空値入力：必須項目確認・入力促進

【7.2 データベースエラー】
　- 接続失敗：設定確認・ネットワーク確認
　- 権限不足：データベース権限確認・管理者連絡
　- 制約違反：データ制約確認・修正要求

【7.3 システムエラー】
　- 暗号化失敗：ライブラリ確認・処理再試行
　- ファイルアクセス失敗：権限確認・環境確認
　- メモリ不足：システムリソース確認

【7.4 業務エラー対策】
　- トランザクション制御：処理の原子性確保
　- ロールバック処理：エラー時のデータ整合性維持
　- エラーログ出力：問題分析・運用改善

■ 8. 関連ファイル・関数
====================================================================
【8.1 メインスクリプト】
　◆ 主要ファイル
　　- create_user.py：ユーザー作成スクリプト本体（103行）
　　- 実行方式：コマンドライン・インタラクティブ対応

　◆ 依存モジュール
　　- Flask：フレームワーク基盤
　　- werkzeug.security：パスワードハッシュ化
　　- sqlalchemy：データベース操作
　　- dotenv：環境変数読み込み

【8.2 データベース関連ファイル・関数】
　◆ データベース接続（app/database.py）
　　- get_db_session()：セッション取得
　　- 環境変数読み込み：DB接続情報取得

　◆ テーブル定義（sql/CREATE_USER_MST.sql）
　　- USER_MST：ユーザーマスタテーブル（9行）
　　- PRIMARY KEY：USER_ID

【8.3 認証連携ファイル・関数】
　◆ 認証処理（app/auth.py）
　　- check_password_hash()：ログイン時パスワード検証
　　- ユーザー認証：作成済みユーザーでのログイン処理

　◆ パスワード処理関数
　　- generate_password_hash()：パスワード暗号化
　　- ハッシュ化アルゴリズム：werkzeug標準

【8.4 主要処理関数】
　◆ create_user関数
　　- 引数：user_id, username, password, custom_db_params
　　- 戻り値：True（成功）, False（失敗）
　　- 処理：重複確認・暗号化・DB保存

　◆ メイン処理（__main__）
　　- 引数解析：コマンドライン引数チェック
　　- インタラクティブ入力：対話形式情報取得
　　- 追加ユーザー作成：標準ユーザー選択作成

【8.5 エラー処理・セキュリティ関数】
　◆ トランザクション制御
　　- session.commit()：変更確定
　　- session.rollback()：エラー時復旧
　　- session.close()：リソース解放

　◆ 入力検証
　　- 必須項目チェック：空値・None確認
　　- 文字数制限確認：データベース制約遵守
　　- 形式検証：不正文字・特殊文字確認

【8.6 運用支援】
　◆ ログ・監査
　　- 実行ログ出力：ユーザー作成履歴
　　- エラーログ記録：問題分析用

　◆ 関連スクリプト（推奨）
　　- ユーザー一覧表示スクリプト
　　- ユーザー無効化スクリプト
　　- パスワード変更スクリプト 