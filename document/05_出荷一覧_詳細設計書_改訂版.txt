====================================================================
在庫管理システム - 出荷一覧画面 詳細設計書（改訂版）
====================================================================

■ 1. 画面概要
====================================================================
【画面名】
　出荷一覧画面

【画面目的】
　過去に登録された出荷データを検索・一覧表示し、
　出荷実績の確認と管理機能を提供する。
　また、検索結果をPDF出力およびCSV出力する機能も含む。

【アクセス情報】
　- URL: /shipments
　- 認証: 必須（ログイン後のみアクセス可能）
　- PDF出力: GET /shipment_pdf
　- CSV出力: GET /shipment_csv

■ 2. 業務概要
====================================================================
【主要業務】
　1. 詳細検索条件による出荷データの検索・表示
　2. 出荷実績データの一覧確認
　3. 製品・数量・出荷先等の詳細情報表示
　4. 過去出荷データの履歴管理
　5. 出荷データの削除機能
　6. 検索結果のPDF・CSV出力機能

【業務上の重要性】
　- 出荷業務の実績管理と履歴確認
　- 取引先別・製品別出荷実績の把握
　- 出荷データの追跡と監査機能
　- 業務完了データの記録管理

【検索対象条件】
　- ベース、加入度数、L/R、色による製品仕様検索
　- コーティング（NC/HC）による絞り込み
　- 出荷日による日付検索
　- 出荷先、受注番号による絞り込み
　- 出荷ステータスによる状態別検索

【重要な業務ルール】
　- 複数の検索条件を組み合わせた詳細検索が可能
　- 全ての検索条件は任意指定（空欄での全件検索可能）
　- 在庫データ（BPRD_DAT）と紐づく出荷実績のみ表示
　- 出荷ステータスは日本語で表示（未出荷、完了済み等）

■ 3. 処理フロー
====================================================================
【3.1 メイン処理フロー】
```
1. ユーザーが出荷一覧画面（/shipments）にアクセス
　　↓
2. @login_required デコレータで認証チェック
　　↓
3. routes.py の shipment_list() 関数実行
　　↓
4. ShipmentSearchForm() フォームインスタンス作成
　　├─ セレクトボックス選択肢設定（ベース、加入度数）
　　└─ BfspMst.get_choices() による動的選択肢生成
　　↓
5. GET: 初期画面表示（検索フォームのみ）
   POST: 検索処理実行
　　↓
6. POST時: Shipment.search() メソッド呼び出し
　　↓
7. 検索結果表示またはメッセージ表示
```

【3.2 検索処理詳細フロー】
```
Shipment.search() 内部処理:
1. データベースセッション取得（get_db_session()）
　　↓
2. 出荷一覧検索SQLクエリ構築・実行
　　├─ BSHK_DAT, BPRD_DAT, BFSP_MST, BRCP_DAT, BZTR_MST テーブル結合
　　├─ 検索条件による動的WHERE句生成
　　└─ 出荷日降順でORDER BY
　　↓
3. 検索結果の整形処理
　　├─ 出荷ステータスコードの日本語変換
　　├─ 全フィールドの文字列変換
　　└─ NULLデータの空文字変換
　　↓
4. 例外処理・エラーログ出力
　　├─ OperationalError: データベース接続エラー
　　├─ SQLAlchemyError: SQL実行エラー
　　├─ ValueError: バリデーションエラー
　　└─ 汎用Exception: 予期せぬエラー
　　↓
5. セッションクローズ・検索結果返却
```

【3.3 削除処理フロー】
```
DELETE /shipment/<shipment_id> 処理:
1. Ajax経由での削除要求受付
　　↓
2. Shipment.delete_shipment() メソッド実行
　　├─ 出荷データと関連受注データの取得
　　├─ 削除可能性チェック（加工済み・納品済みは削除不可）
　　└─ 出荷データ削除・関連受注データのフラグ復旧
　　↓
3. JSON形式での処理結果返却
```

■ 4. 画面レイアウト
====================================================================
【4.1 画面構造】
```
├── base.html（共通テンプレート）
│   ├── ヘッダー（ナビゲーション）
│   ├── サイドメニュー
│   └── メインコンテンツエリア
│       └── shipment_list.html
│           ├── ページタイトル「出荷一覧」
│           ├── 検索条件セクション
│           │   ├── 検索フォーム（2列レイアウト）
│           │   └── 検索ボタン
│           └── 検索結果セクション
│               └── 出荷実績テーブル
```

【4.2 検索条件セクション】
```
┌─────────────────────────────────────────────────────────────┐
│                       出荷一覧                            │
├───────────────────────────┬─────────────────────────────────┤
│ ベース：                   │ 加入度数：                    │
│ [全て]                     │ [全て]                        │
├───────────────────────────┬─────────────────────────────────┤
│ L/R：                       │ 色：                          │
│ [全て]                     │ [全て]                        │
├───────────────────────────┬─────────────────────────────────┤
│ コーティング：             │ 出荷日：                        │
│ [全て]                     │ [2024-01-01_________]           │
├───────────────────────────┴─────────────────────────────────┤
│                      [検索]                              │
└─────────────────────────────────────────────────────────────┘
```

【4.3 検索結果セクション】
```
┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
│出荷ID│出荷日    │製品ID│ LOT  │ベース│加入度数│ LR │色 │出荷先    │数量│製造ID│
├──────┼─────────┼──────┼──────┼──────┼────────┼────┼───┼─────────┼────┼──────┤
│ 50001│2024-01-15│ 1001L│240101│  2   │  150   │ L  │CL │コロンバス│ 10 │100001│
│ 50002│2024-01-14│ 1002R│240101│  2   │  150   │ R  │CL │コロンバス│ 15 │100002│
│ 50003│2024-01-13│ 1003L│240102│  4   │  175   │ L  │BR │ダラス   │  8 │100003│
│ 50004│2024-01-12│ 1004R│240102│  4   │  175   │ R  │BR │ヤンガー │ 12 │100004│
└──────┴─────────┴──────┴──────┴──────┴────────┴────┴───┴─────────┴────┴──────┘
```

■ 5. データ項目
====================================================================
【5.1 検索条件項目】

◆ ベース（base）
　- 入力方式: セレクトボックス
　- 必須/任意: 任意項目
　- 選択肢: BfspMst.get_choices('BFSP_BASE')による動的生成
　- 初期値: 全て

◆ 加入度数（adp）
　- 入力方式: セレクトボックス
　- 必須/任意: 任意項目
　- 選択肢: BfspMst.get_choices('BFSP_ADP')による動的生成
　- 初期値: 全て

◆ L/R（lr）
　- 入力方式: テキスト入力
　- 必須/任意: 任意項目
　- フォーマット: L または R

◆ 色（color）
　- 入力方式: テキスト入力
　- 必須/任意: 任意項目
　- フォーマット: BR、SG等の色コード

◆ コーティング（proc_type）
　- 入力方式: セレクトボックス
　- 必須/任意: 任意項目
　- 選択肢: 全て、NC（ノンコート）、HC（ハードコート）

◆ 出荷日（shipment_date）
　- 入力方式: 日付入力フィールド
　- 必須/任意: 任意項目
　- フォーマット: YYYY-MM-DD

◆ 出荷先（destination）
　- 入力方式: テキスト入力
　- 必須/任意: 任意項目
　- 説明: 出荷先ID

◆ 受注番号（order_no）
　- 入力方式: テキスト入力
　- 必須/任意: 任意項目
　- 説明: 客先受注番号

◆ 出荷ステータス（shipment_status）
　- 入力方式: セレクトボックス
　- 必須/任意: 任意項目
　- 選択肢: 全て、未出荷、完了済み等

【5.2 表示項目】

◆ ID（id）
　- 説明: 出荷データを一意に識別するID
　- データソース: BSHK_DAT.BSHK_ID
　- 用途: 出荷データの削除処理等

◆ 出荷日（shipment_date）
　- 説明: 実際の出荷日
　- データソース: BSHK_DAT.BSHK_DT
　- フォーマット: yy/MM/dd

◆ 出荷先（destination）
　- データソース: BZTR_MST.BZTR_NM
　- 説明: 出荷先企業名

◆ 受注番号（order_number）
　- データソース: BRCP_DAT.BRCP_ORDER_NO
　- 説明: 客先受注番号

◆ LOT（lot）
　- データソース: BPRD_DAT.BPDD_LOT
　- 説明: 製造ロット番号

◆ ベース（base）
　- データソース: BFSP_MST.BFSP_BASE
　- 説明: レンズベースカーブ値

◆ 加入度数（adp）
　- データソース: BFSP_MST.BFSP_ADP
　- 説明: 遠近両用度数

◆ L/R（lr）
　- データソース: BFSP_MST.BFSP_LR
　- 説明: 左右識別

◆ 色（color）
　- データソース: BFSP_MST.BFSP_CLR
　- 説明: レンズ色

◆ 数量（quantity）
　- データソース: BSHK_DAT.BSHK_QTY
　- 説明: 出荷数量

◆ コート日（coating_date）
　- データソース: BPRD_DAT.BPDD_CRT
　- 説明: 加工完了日
　- フォーマット: YYYY-MM-DD

◆ コーティング（proc_type）
　- 算出ロジック: BRCP_DAT.BRCP_PROCに基づく
　- 表示値: NC（ノンコート）、HC（ハードコート）

◆ 出荷ステータス（shipment_status）
　- データソース: BSHK_DAT.BSHK_FLG
　- 変換ルール: DatabaseConstants.SHIPMENT_STATUS_LABELSによる日本語変換
　- 表示例: 未出荷、完了済み、不明

■ 6. 業務ルール
====================================================================
【6.1 検索データ取得ルール】
　- 基本テーブル：BSHK_DAT（出荷データ）
　- 結合テーブル：BPRD_DAT（製造データ）
　- 結合テーブル：BFSP_MST（BF規格マスタ）
　- 結合テーブル：BRCP_DAT（受注データ）
　- 結合テーブル：BZTR_MST（取引先マスタ）

【6.2 データ抽出条件】
　- 全ての検索条件は任意（WHERE句は動的生成）
　- 製造データとの正常な結合ができるもののみ
　- 検索条件は部分一致・完全一致を適切に使い分け

【6.3 表示順序ルール】
　- 出荷日降順（最新の出荷データから表示）
　- ORDER BY BSHK.BSHK_DT DESC

【6.4 データ結合ルール】
　- BSHK_DAT.BSHK_PDD_ID = BPRD_DAT.BPDD_ID（製造データとの結合）
　- BPRD_DAT.BPDD_PRD_ID = BFSP_MST.BFSP_PRD_ID（製品情報との結合）
　- BSHK_DAT.BSHK_RCP_ID = BRCP_DAT.BRCP_ID（受注データとの結合）
　- BSHK_DAT.BSHK_TO = BZTR_MST.BZTR_ID（出荷先情報との結合）

【6.5 削除処理ルール】
　- 出荷データの削除機能を提供
　- 削除対象: BSHK_DAT テーブルの指定レコード
　- 削除時の業務ルール確認は呼び出し元で実装

■ 7. エラーハンドリング
====================================================================
【7.1 入力検証エラー】
　- 出荷日未入力: 「出荷日は必須項目です」
　- 日付フォーマットエラー: 「正しい日付形式で入力してください」
　- 期間指定エラー: 「開始日は終了日以前を指定してください」

【7.2 業務エラー】
　- 検索結果なし: 「指定期間の出荷データが見つかりませんでした。」
　- 認証エラー: ログイン画面へのリダイレクト

【7.3 システムエラー】
　- データベース接続エラー: 「出荷データ検索中にエラーが発生しました」
　- 予期せぬエラー: 「データベースへの接続に失敗しました。システム管理者に連絡してください。」

【7.4 エラーログ】
　- 全てのエラーは「log_error」関数でログ出力される
　- データベースエラー、予期せぬエラー等を記録

■ 8. 関連ファイル・関数
====================================================================
【8.1 主要ファイル・関数】

◆ ルーティング
　- ファイル: app/routes.py
　- 関数: shipment_list()
　- 機能: 出荷一覧画面の表示制御
　- 認証: @login_required デコレータ

◆ PDF出力ルーティング
　- ファイル: app/routes.py
　- 関数: shipment_pdf()
　- 機能: 検索結果のPDF出力
　- 呼び出し先: app/export_pdf.py:shipment_export_pdf()

◆ CSV出力ルーティング
　- ファイル: app/routes.py
　- 関数: shipment_csv()
　- 機能: 検索結果のCSV出力
　- 呼び出し先: app/csv_exporter.py:ShipmentCsvExporter.export_shipment_csv()

◆ 削除ルーティング
　- ファイル: app/routes.py
　- 関数: delete_shipment()
　- 機能: Ajax経由での出荷データ削除
　- HTTPメソッド: DELETE

◆ データ取得モデル
　- ファイル: app/shipment.py
　- クラス: Shipment
　- 関数: search()
　- 機能: 出荷データの検索・取得
　- 呼び出し元: routes.py の shipment_list()

◆ 削除処理モデル
　- ファイル: app/shipment.py
　- クラス: Shipment
　- 関数: delete_shipment()
　- 機能: 出荷データの削除処理

◆ フォーム定義
　- ファイル: app/forms.py
　- クラス: ShipmentSearchForm
　- 機能: 出荷一覧検索フォームの定義
　- 項目: base, adp, lr, color, proc_type, shipment_date, destination, order_no, shipment_status

◆ テンプレート
　- ファイル: app/templates/shipment_list.html
　- 機能: 出荷一覧画面のHTML表示
　- 継承: base.html

◆ エラーログ
　- ファイル: app/models.py
　- 関数: log_error()
　- 機能: エラーログ記録機能

【8.2 データベーステーブル】

◆ BSHK_DAT（出荷データテーブル）
　- 主要項目: BSHK_ID, BSHK_DT, BSHK_PDD_ID, BSHK_QTY, BSHK_TO, BSHK_RCP_ID, BSHK_FLG
　- 業務用途: 出荷実績データの管理

◆ BPRD_DAT（製造データテーブル）
　- 主要項目: BPDD_ID, BPDD_PRD_ID, BPDD_LOT, BPDD_CRT, BPDD_FLG
　- 業務用途: 製造情報との結合

◆ BFSP_MST（BF規格マスタテーブル）
　- 主要項目: BFSP_PRD_ID, BFSP_BASE, BFSP_ADP, BFSP_LR, BFSP_CLR
　- 業務用途: 製品仕様情報の表示

◆ BRCP_DAT（受注データテーブル）
　- 主要項目: BRCP_ID, BRCP_ORDER_NO, BRCP_PROC
　- 業務用途: 受注情報の表示

◆ BZTR_MST（取引先マスタテーブル）
　- 主要項目: BZTR_ID, BZTR_NM
　- 業務用途: 出荷先企業名の表示

【8.3 PDF・CSV出力処理】

◆ PDF出力処理
　- ファイル: app/export_pdf.py
　- 関数: shipment_export_pdf()
　- 機能: 検索結果をPDF形式で出力
　- 使用ライブラリ: reportlab
　- フォント: MSGothic（日本語対応）
　- ページ設定: A4サイズ、マージン設定
　- テーブル形式: 罫線付きテーブルでデータ表示

◆ CSV出力処理
　- ファイル: app/csv_exporter.py
　- クラス: ShipmentCsvExporter
　- 関数: export_shipment_csv()
　- 機能: 検索結果をCSV形式で出力
　- エンコード: UTF-8 BOM付き
　- ファイル名: shipments_YYYYMMDD_HHMMSS.csv

【8.4 関連画面・機能】
　- 出荷作成画面（ノンコート）: /shipping/create/<製造ID>
　- 出荷作成画面（ハードコート）: /shipping/create_hard/<製造ID>
　- ノンコート在庫検索: /noncoat-stock
　- ハードコート在庫検索: /hardcoat_stock

【8.5 定数・設定】
　- DatabaseConstants.SHIPMENT_STATUS_LABELS: 出荷ステータス日本語変換テーブル
　- DatabaseConstants.PROC_NON_COAT: ノンコート加工区分
　- DatabaseConstants.PROC_HARD_COAT: ハードコート加工区分
　- DatabaseConstants.BSHK_FLG_PROCESSED: 加工完了フラグ
　- DatabaseConstants.BSHK_FLG_DELIVERED: 納品完了フラグ
　- PdfConstants.*: PDF出力関連定数
　- ErrorMessages.*: エラーメッセージ定数
