====================================================================
在庫管理システム - 出荷作成（ハードコート）画面 詳細設計書（改訂版）
====================================================================

■ 1. 画面概要
====================================================================
【画面名】
　HC出荷作成画面

【画面目的】
　ハードコート加工済みレンズの出荷作成機能を提供する。
　在庫情報、受注残情報、加工指図情報を表示し、出荷先・出荷日・数量を入力して出荷データを登録する業務画面である。

【アクセス情報】
　- URL: /shipping/create_hard/<製造ID>（初期表示）
　- URL: /shipping/save_hard/<製造ID>（出荷登録）
　- 認証: 必須（ログイン後のみアクセス可能）

【業務上の重要性】
　- ハードコート在庫の適切な出荷管理
　- 受注残との整合性を保った出荷計画
　- 複数出荷先への効率的な分割出荷対応

■ 2. 業務概要
====================================================================
【主要業務】
　1. ハードコート在庫情報の確認・表示
　2. 該当製品のハードコート受注残情報の確認
　3. 関連する加工指図履歴の確認
　4. 複数出荷先への分割出荷データ入力・登録
　5. 在庫・受注データの自動状態更新

【業務フロー】
　1. ハードコート在庫検索画面から対象在庫選択
　2. 在庫詳細・受注残・加工指図情報の確認
　3. 出荷先・出荷日・数量の入力（複数出荷先対応）
　4. 出荷データ作成・関連データ自動更新

【対象データ】
　- ハードコート加工済み在庫（BPDD_PROC = 1）
　- ハードコート受注残（BRCP_PROC = DatabaseConstants.PROC_HARD_COAT）
　- 加工指図履歴（BSHK_TO = 1）

【業務制約】
　- 出荷数量 ≤ 在庫数量
　- 加工先（出荷先ID=1）は選択対象外
　- 複数出荷先への分割出荷可能

■ 3. 画面レイアウト
====================================================================
【3.1 画面構成】
```
┌─────────────────────────────────────────────────────────────┐
│                     HC出荷作成                              │
├─────────────────────────────────────────────────────────────┤
│ [在庫情報]                                                 │
│ ベース | 加入度数 | LR | カラー | LOT   | 在庫数 | コート日 │
│   1   |   150   | L  |  無色  | 12345 |   25   |240115   │
├─────────────────────────────────────────────────────────────┤
│ [受注残情報]                                               │
│ 受注日     | 注文番号    | 出荷先     | 数量                │
│ 2024/01/15 | ORDER-001   | コロンバス | 20                 │
├─────────────────────────────────────────────────────────────┤
│ [加工指図]                                                 │
│ 加工指図日付 | 加工指図数量 | LOT                          │
│ 2024/01/15  | 25          | 12345                        │
├─────────────────────────────────────────────────────────────┤
│ [出荷情報入力]                                             │
│ 出荷先: [コロンバス ▼] 出荷日: [2024-01-15] 数量: [___] [削除]│
│ [出荷先を追加]                                             │
├─────────────────────────────────────────────────────────────┤
│ [操作ボタン]                                               │
│ [戻る] [出荷を作成]                                        │
└─────────────────────────────────────────────────────────────┘
```

【3.2 表示エリア詳細】

◆ 在庫情報エリア
　- 目的: 出荷対象在庫の詳細確認
　- 表示内容: 製品仕様・在庫数・コート日
　- 表示形式: 読み取り専用テーブル

◆ 受注残情報エリア
　- 目的: ハードコート受注残の確認・出荷計画立案
　- 表示内容: 受注日・注文番号・出荷先・受注残数量
　- 並び順: 受注日・注文番号昇順（FIFO出荷の参考）

◆ 加工指図エリア
　- 目的: 過去の加工指図履歴確認
　- 表示内容: 指図日付・指図数量・LOT
　- 業務意味: 該当製品の加工実績追跡

◆ 出荷情報入力エリア
　- 目的: 複数出荷先への分割出荷データ入力
　- 入力項目: 出荷先・出荷日・数量
　- 操作機能: 出荷先追加・削除

■ 4. データ項目詳細
====================================================================
【4.1 表示項目（読み取り専用）】

◆ 在庫情報
　- ベース: レンズベースカーブ値（BFSP_BASE）
　- 加入度数: 遠近両用度数（BFSP_ADP）
　- L/R: 左右識別（BFSP_LR）
　- カラー: レンズ色（BFSP_CLR）
　- LOT: 製造ロット番号（BPDD_LOT）
　- 在庫数: 現在在庫数（dbo.Get_Zaiko_Qty_BF関数）
　- コート日: ハードコート加工日（BPDD_CRT：YYMMDD形式）

◆ 受注残情報
　- 受注日: 受注データ登録日（BRCP_DT）
　- 注文番号: 顧客注文番号（BRCP_ORDER_NO）
　- 出荷先: 取引先名（BZTR_NM）
　- 数量: 受注残数量（dbo.Get_ODR_ZAN_Qty_BF関数）

◆ 加工指図情報
　- 加工指図日付: 加工指図を出した日（BSHK_DT）
　- 加工指図数量: 加工依頼数量（BSHK_QTY）
　- LOT: 対象製造ロット（BPDD_LOT）

【4.2 入力項目】

◆ 出荷先
　- 必須項目
　- データソース: 取引先マスタ（BZTR_MST）
　- 制約条件: 出荷先ID≠1（加工先は除外）
　- 表示形式: プルダウン選択（取引先名表示）

◆ 出荷日
　- 必須項目
　- データ型: 日付（YYYY-MM-DD形式）
　- 初期値: 当日日付
　- 業務制約: 将来日付設定可能

◆ 数量
　- 必須項目
　- データ型: 正整数
　- 範囲制約: 1以上
　- 業務制約: 合計出荷数量 ≤ 在庫数量

■ 5. 業務ルール
====================================================================
【5.1 データ取得ルール】

◆ 在庫情報取得条件
　- 対象: 指定製造ID（stock_id）の在庫データ
　- 結合: 製造データ（BPRD_DAT）+ BF規格マスタ（BFSP_MST）
　- 在庫数計算: dbo.Get_Zaiko_Qty_BF関数による動的計算

◆ ハードコート受注残取得条件
　- 対象製品: 在庫製品IDと同一製品のハードコート受注
　- フィルタ条件: BRCP_PROC=1、BRCP_FLG=0、受注残>0
　- 並び順: 受注日・注文番号昇順（FIFO参照用）

◆ 加工指図取得条件
　- 対象: 同一製品IDの加工指図履歴
　- フィルタ条件: BSHK_TO=1、BSHK_FLG=0
　- 目的: 過去の加工実績確認

【5.2 出荷登録ルール】

◆ 基本検証ルール
　- 在庫存在チェック: 指定製造IDの在庫確認
　- 数量妥当性チェック: 合計出荷数量 ≤ 在庫数量
　- 必須項目チェック: 出荷先・出荷日・数量の完全性

◆ 出荷先別処理分岐
　- **出荷先=加工・欠損の場合**:
　  - 対象: DatabaseConstants.SHIPMENT_TO_PROCESS（ID=1）、DatabaseConstants.ORDER_CMP_MISSING（ID=9）
　  - 受注との紐付けなし（BSHK_RCP_ID=0）
　  - 加工指図として登録
　- **それ以外の出荷先の場合**:
　  - FIFO順で受注データと紐付け（BRCP_DT昇順）
　  - 受注残数量に基づく割当処理
　  - 受注完了時はBRCP_FLGをSHIPPEDに更新

◆ FIFO（先入先出）割当ルール
　- 対象: 該当出荷先・該当製品・該当加工区分の受注データ
　- 優先順: 受注日昇順（BRCP_DT ASC）
　- 処理: 受注残数量を順次消化
　- 制約: 受注残不足時はエラー

【5.3 複数出荷先対応ルール】

◆ 分割出荷機能
　- 同一在庫を複数出荷先に分割出荷可能
　- 各出荷先ごとに独立した出荷データ作成
　- 出荷先ごとの個別出荷日設定可能

◆ 出荷先管理
　- 動的追加: 「出荷先を追加」ボタンによる追加
　- 削除機能: 個別削除ボタン（最低1件は保持）
　- 重複チェック: 同一出荷先への重複出荷許可

【5.4 自動状態更新ルール】

◆ 受注完了フラグ更新
　- 条件: 出荷数量 ≥ 受注残数量
　- 処理: BRCP_FLG = 1（完了）
　- 実行関数: BrcpDat.set_flg()

◆ 在庫完了フラグ更新
　- 条件: 合計出荷数量 = 在庫数量
　- 処理: BPDD_FLG = 1（在庫なし）
　- 実行関数: PrdDat.set_flg()

■ 6. 処理フロー
====================================================================
【6.1 メイン処理フロー】
```
1. ハードコート在庫検索画面から製造ID指定でアクセス
　　↓
2. 認証チェック（ログイン必須）
　　↓
3. 在庫情報取得（Shipment.get_stock_info）
　　├─ 在庫存在確認
　　└─ 不存在時：エラーメッセージ・ハードコート在庫検索に戻る
　　↓
4. 関連情報一括取得
　　├─ ハードコート受注残（Shipment.get_hardcoat_orders）
　　├─ 加工指図履歴（Shipment.get_proc_order）
　　└─ 出荷先マスタ（Shipment.get_shipping_destinations）
　　↓
5. 画面表示（出荷情報入力フォーム初期化）
　　├─ 出荷日初期値：当日設定
　　└─ 出荷先選択肢：加工先（ID=1）除外
　　↓
6. ユーザー入力（複数出荷先対応）
　　├─ 出荷先選択・出荷日・数量入力
　　├─ 追加・削除操作
　　└─ 入力完了・送信
　　↓
7. 出荷データ保存処理（Shipment.save）
　　↓
8. 成功時：メッセージ表示・ハードコート在庫検索に戻る
```

【6.2 出荷データ保存処理フロー】
```
1. JSON形式データ受信・解析
　　↓
2. 基本バリデーション
　　├─ データ形式チェック
　　├─ 必須項目チェック
　　└─ 数量妥当性チェック
　　↓
3. 在庫情報確認（再取得）
　　├─ 在庫存在確認
　　├─ 在庫数量確認
　　└─ 合計出荷数量≤在庫数量チェック
　　↓
4. 出荷先別処理分岐
　　├─ 出荷先=加工（ID=1）：直接出荷データ登録
　　└─ 出荷先≠加工：受注データとFIFO紐付け
　　↓
5. データベース登録・更新
　　├─ 出荷データ（BSHK_DAT）登録
　　├─ 受注完了フラグ更新（該当時）
　　└─ 在庫完了フラグ更新（該当時）
　　↓
6. トランザクションコミット・結果返却
```

【6.3 FIFO受注紐付け処理フロー】
```
1. 対象受注データ取得
　　├─ 条件：出荷先ID・製品ID・加工区分・受注残>0
　　└─ 並び順：受注日昇順
　　↓
2. 受注データ順次処理
　　├─ 出荷数量 vs 受注残数量比較
　　├─ 割当数量決定（min(出荷数量, 受注残数量)）
　　└─ 出荷データ作成・受注フラグ更新判定
　　↓
3. 出荷数量消化確認
　　├─ 残出荷数量>0：次受注データ処理
　　├─ 残出荷数量=0：完了
　　└─ 受注残不足：エラー（受注残より出荷数量が多い）
```

■ 7. エラー処理
====================================================================
【7.1 業務エラー】

◆ 在庫関連エラー
　- 在庫不存在: 「指定された在庫が見つかりません。」
　- 在庫数不足: 「出荷数量が在庫数量を超えています。」
　- 処理: ハードコート在庫検索画面にリダイレクト

◆ 受注関連エラー
　- 受注残不足: 「受注残より出荷数量が多いです。」
　- 処理: JSON形式でエラー詳細返却

◆ 入力関連エラー
　- データ形式エラー: 「無効なデータ形式です。」
　- 必須項目未入力: 項目ごとの個別エラーメッセージ
　- 数量範囲エラー: 「数量は1以上の整数を入力してください。」

【7.2 システムエラー】

◆ 画面表示エラー
　- エラーメッセージ: 「ハードコート出荷作成画面の表示中にエラーが発生しました」
　- 処理: フラッシュメッセージ表示・前画面に戻る

◆ データ保存エラー
　- エラー応答: JSON形式でエラー詳細返却
　- クライアント処理: エラーダイアログ表示・操作ボタン再有効化

【7.3 業務制約エラー】

◆ 出荷先制約エラー
　- 加工先選択禁止: システムレベルで選択肢から除外
　- 出荷先未選択: フロントエンド必須チェック

◆ 数量制約エラー
　- 在庫超過: サーバーサイド最終チェック
　- 受注残超過: FIFO処理内でのチェック

■ 8. 関連ファイル・関数
====================================================================
【8.1 ルーティング関数】
　- app/routes.py: create_shipping_hard()
　  * 初期画面表示制御
　  * 在庫・受注残・加工指図・出荷先情報取得
　  * 認証チェック・エラーハンドリング
　- app/routes.py: save_shipping_hard()
　  * 出荷データ保存処理制御
　  * JSON形式データ受信・バリデーション
　  * 結果応答（JSON形式）

【8.2 データ処理関数】
　- app/shipment.py: Shipment.get_stock_info()
　  * 在庫情報取得（製造データ+BF規格マスタ結合）
　  * 在庫数計算（dbo.Get_Zaiko_Qty_BF関数使用）
　- app/shipment.py: Shipment.get_hardcoat_orders()
　  * ハードコート受注残取得
　  * 対象：BRCP_PROC=1、BRCP_FLG=0、受注残>0
　- app/shipment.py: Shipment.get_proc_order()
　  * 加工指図履歴取得
　  * 対象：BSHK_TO=1、BSHK_FLG=0
　- app/shipment.py: Shipment.get_shipping_destinations()
　  * 出荷先マスタ全件取得
　- app/shipment.py: Shipment.save()
　  * 出荷データ保存メイン処理
　  * FIFO受注紐付け・フラグ自動更新

【8.3 フォーム・テンプレート】
　- app/templates/shipping/create_hard.html
　  * ハードコート出荷作成画面テンプレート
　  * 在庫・受注残・加工指図情報表示
　  * 複数出荷先入力フォーム・JavaScript制御

【8.4 データベーステーブル】
　- BPRD_DAT: 製造データテーブル
　  * 主要項目: BPDD_ID（製造ID）、BPDD_PRD_ID（製品ID）、BPDD_LOT（LOT）、BPDD_CRT（コート日）、BPDD_FLG（フラグ）
　  * 業務用途: ハードコート在庫の基盤データ
　- BFSP_MST: BF規格マスタテーブル
　  * 主要項目: BFSP_PRD_ID（製品ID）、BFSP_BASE（ベース）、BFSP_ADP（加入度数）、BFSP_LR（L/R）、BFSP_CLR（カラー）
　  * 業務用途: 製品仕様情報の表示
　- BRCP_DAT: 受注データテーブル
　  * 主要項目: BRCP_ID（受注ID）、BRCP_DT（受注日）、BRCP_ORDER_NO（注文番号）、BRCP_ORDER_CMP（注文会社ID）、BRCP_PRD_ID（製品ID）、BRCP_PROC（加工区分）、BRCP_FLG（フラグ）
　  * 業務用途: ハードコート受注残管理・FIFO出荷紐付け
　- BZTR_MST: 取引先マスタテーブル
　  * 主要項目: BZTR_ID（取引先ID）、BZTR_NM（取引先名）
　  * 業務用途: 出荷先選択肢・受注先表示
　- BSHK_DAT: 出荷データテーブル
　  * 主要項目: BSHK_ID（出荷ID）、BSHK_TO（出荷先ID）、BSHK_PDD_ID（製造ID）、BSHK_RCP_ID（受注ID）、BSHK_DT（出荷日）、BSHK_QTY（数量）、BSHK_FLG（フラグ）
　  * 業務用途: 出荷実績管理・加工指図履歴

【8.5 重要な業務関数】
　- dbo.Get_Zaiko_Qty_BF(): 在庫数量計算関数
　  * 機能: 製造数量 - 出荷済み数量
　  * 呼び出し元: get_stock_info()
　- dbo.Get_ODR_ZAN_Qty_BF(): 受注残数量計算関数
　  * 機能: 受注数量 - 出荷済み数量
　  * 呼び出し元: get_hardcoat_orders()、save()
　- BrcpDat.set_flg(): 受注フラグ更新関数
　  * 機能: 受注完了状態の自動更新
　- PrdDat.set_flg(): 在庫フラグ更新関数
　  * 機能: 在庫完了状態の自動更新

【8.6 関連画面・機能】
　- ハードコート在庫検索画面: 出荷対象在庫の選択元
　- 出荷一覧画面: 作成した出荷データの確認
　- 加工指示書画面: 関連する加工指図の確認

■ 9. 業務上の重要ポイント
====================================================================
【9.1 ハードコート業務フロー連携】
　- 在庫検索 → 出荷作成 → 出荷実績管理の一連フロー
　- 加工指図履歴との関連性確認による品質管理
　- 受注残との整合性を保った計画的出荷

【9.2 データ整合性管理】
　- FIFO（先入先出）原則による公平な受注消化
　- 在庫・受注フラグの自動更新による状態管理
　- 複数出荷先分割時の数量整合性確保

【9.3 業務運用上の利点】
　- 複数出荷先への効率的な分割出荷対応
　- リアルタイム在庫・受注残確認による正確な出荷計画
　- 加工指図履歴参照による製品トレーサビリティ

【9.4 システム保守・運用】
　- JSON API による非同期データ保存
　- 2重送信防止による操作安全性確保
　- エラー時の適切な状態復旧機能
