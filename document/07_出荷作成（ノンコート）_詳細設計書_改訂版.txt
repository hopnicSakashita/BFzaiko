====================================================================
在庫管理システム - 出荷作成（ノンコート）画面 詳細設計書（改訂版）
====================================================================

■ 1. 画面概要
====================================================================
【画面名】
　NC出荷作成画面

【画面目的】
　ノンコートレンズの出荷作成機能を提供する。
　在庫情報、受注残情報を表示し、出荷先・出荷日・数量を入力して出荷データを登録する業務画面である。

【アクセス情報】
　- URL: /shipping/create/<製造ID>（初期表示）
　- URL: /shipping/save/<製造ID>（出荷登録）
　- 認証: 必須（ログイン後のみアクセス可能）

■ 2. 業務概要
====================================================================
【主要業務】
　1. ノンコート在庫情報の確認・表示
　2. 該当製品のノンコート受注残情報の確認
　3. 複数出荷先への分割出荷データ入力・登録
　4. 在庫・受注データの自動状態更新

【業務上の重要性】
　- ノンコート在庫の適切な出荷管理
　- 受注残との整合性を保った出荷計画
　- 複数出荷先への効率的な分割出荷対応

【業務フロー】
　1. ノンコート在庫検索画面から対象在庫選択
　2. 在庫詳細・受注残情報の確認
　3. 出荷先・出荷日・数量の入力
　4. 出荷データ登録・在庫減算・受注消化

【重要な業務ルール】
　- 在庫数量を超える出荷は不可
　- 複数出荷先への分割出荷可能
　- FIFO（先入先出）による受注紐付け
　- 出荷数量分の在庫データフラグ更新

■ 3. 処理フロー
====================================================================
【3.1 メイン処理フロー】
```
1. ユーザーが出荷作成画面（/shipping/create/<製造ID>）にアクセス
　　↓
2. @login_required デコレータで認証チェック
　　↓
3. routes.py の create_shipping() 関数実行
　　↓
4. 製造ID基準で在庫・受注データ取得
　　├─ PrdDat.get_by_id() で在庫データ取得
　　├─ BrcpDat.get_orders() で受注残取得
　　└─ Shipment.get_shipping_destinations() で出荷先取得
　　↓
5. GET: 初期画面表示
   POST: 出荷データ保存処理
　　↓
6. POST時: Shipment.save() メソッド呼び出し
　　↓
7. 出荷データ作成・在庫更新・受注消化処理
```

【3.2 出荷データ保存処理フロー】
```
Shipment.save() 内部処理:
1. トランザクション開始
　　↓
2. 入力データバリデーション
　　├─ 出荷数量合計 ≤ 在庫数量チェック
　　└─ 出荷先・出荷日入力チェック
　　↓
3. 出荷データ登録処理（BSHK_DAT）
　　├─ 各出荷先ごとにレコード作成
　　└─ 出荷ID自動採番
　　↓
4. 在庫データ状態更新
　　├─ 出荷完了時: BPDD_FLG = 1（出荷済み）
　　└─ 部分出荷時: 在庫数量更新
　　↓
5. 受注データ消化処理
　　├─ FIFO（先入先出）による受注紐付け
　　└─ 受注完了時: BRCP_FLG = 1（出荷完了）
　　↓
6. トランザクション制御（commit/rollback）
```

【3.3 FIFO受注紐付け処理フロー】
```
FIFO受注消化処理:
1. 該当製品のノンコート受注データを受注日昇順で取得
　　↓
2. 受注残があるデータから順次出荷数量を割り当て
　　├─ 受注残 ≥ 出荷数量: 該当受注から出荷数量分消化
　　└─ 受注残 < 出荷数量: 受注残全量消化、次の受注へ
　　↓
3. 受注完了判定・フラグ更新
　　├─ 受注残 = 0: BRCP_FLG = 1（完了）
　　└─ 受注残 > 0: BRCP_FLG = DatabaseConstants.BRCP_FLG_NOT_SHIPPED（継続）
```

■ 4. 画面レイアウト
====================================================================
【4.1 画面構造】
```
├── base.html（共通テンプレート）
│   ├── ヘッダー（ナビゲーション）
│   ├── サイドメニュー
│   └── メインコンテンツエリア
│       └── shipping_create.html
│           ├── ページタイトル「NC出荷作成」
│           ├── 在庫情報セクション
│           ├── 受注残情報セクション
│           └── 出荷データ入力セクション
```

【4.2 在庫情報セクション】
```
┌─────────────────────────────────────────────────────────────┐
│                      在庫情報                              │
├──────────┬──────────┬──────────┬──────────┬──────────────────┤
│ 製造ID   │   LOT    │ベース    │加入度数  │      L/R         │
│ 100001   │  240101  │    2     │   150    │       L          │
├──────────┼──────────┼──────────┼──────────┼──────────────────┤
│   色     │ 在庫数量  │          │          │                  │
│   CL     │    50    │          │          │                  │
└──────────┴──────────┴──────────┴──────────┴──────────────────┘
```

【4.3 受注残情報セクション】
```
┌─────────────────────────────────────────────────────────────────────────────┐
│                            受注残情報                                      │
├─────────┬─────────┬───────────┬──────────┬────────┬──────────┬──────────┤
│ 受注日  │ 出荷先  │客先注文番号│ 受注数量  │ 出荷済み│ 受注残   │ 加工種別 │
├─────────┼─────────┼───────────┼──────────┼────────┼──────────┼──────────┤
│24-01-15 │コロンバス│   ABC123  │    20    │   10   │    10    │    NC    │
│24-01-12 │ダラス   │   DEF456  │    15    │    0   │    15    │    NC    │
│24-01-10 │ヤンガー │   GHI789  │    10    │    5   │     5    │    NC    │
└─────────┴─────────┴───────────┴──────────┴────────┴──────────┴──────────┘
```

【4.4 出荷データ入力セクション】
```
┌─────────────────────────────────────────────────────────────────────────────┐
│                          出荷データ入力                                    │
├──────────┬─────────────────┬─────────────────┬───────────────────────────┤
│ 出荷先   │    出荷日       │    出荷数量     │          操作             │
├──────────┼─────────────────┼─────────────────┼───────────────────────────┤
│[▼選択]   │[2024-01-20____] │[______10]      │  [行追加] [行削除]        │
│[▼選択]   │[2024-01-20____] │[______15]      │  [行追加] [行削除]        │
│[▼選択]   │[2024-01-20____] │[______25]      │  [行追加] [行削除]        │
├──────────┴─────────────────┴─────────────────┴───────────────────────────┤
│ 合計出荷数量: 50 / 在庫数量: 50                                          │
├─────────────────────────────────────────────────────────────────────────┤
│                        [出荷登録]                                       │
└─────────────────────────────────────────────────────────────────────────┘
```

■ 5. データ項目
====================================================================
【5.1 在庫情報表示項目】

◆ 製造ID〜色
　- データソース: BPRD_DAT + BFSP_MST
　- 表示形式: 読み取り専用
　- 用途: 出荷対象在庫の確認

◆ 在庫数量
　- 計算方法: dbo.Get_Zaiko_Qty_BF()関数による算出
　- 表示形式: 読み取り専用
　- 用途: 出荷可能数量の確認

【5.2 受注残情報表示項目】

◆ 受注日〜加工種別
　- データソース: BRCP_DAT + BZTR_MST
　- 表示順序: 受注日昇順（FIFO順）
　- 用途: 受注消化優先順位の確認

◆ 受注残
　- 計算方法: dbo.Get_ODR_ZAN_Qty_BF()関数による算出
　- 表示形式: 読み取り専用
　- 用途: 未消化受注数量の確認

【5.3 出荷データ入力項目】

◆ 出荷先
　- 入力方式: プルダウン選択
　- データソース: BZTR_MST（取引先マスタ）
　- 必須/任意: 必須項目
　- 制限: 出荷先ID=1（加工）は除外

◆ 出荷日
　- 入力方式: 日付入力フィールド
　- フォーマット: YYYY-MM-DD
　- 必須/任意: 必須項目
　- 初期値: 当日

◆ 出荷数量
　- 入力方式: 数値入力フィールド
　- データ型: INTEGER
　- 必須/任意: 必須項目
　- 制限: 1以上、在庫数量以下

■ 6. 業務ルール
====================================================================
【6.1 出荷データ登録ルール】
　- 複数出荷先への分割出荷可能
　- 出荷数量合計は在庫数量以下
　- 同一出荷先への重複登録可能（日付違い等）
　- 出荷先ID=1（加工）は選択対象外

【6.2 在庫データ更新ルール】
　- 全在庫出荷時: BPDD_FLG = 1（出荷済み）
　- 部分出荷時: 在庫数量のみ減算
　- 在庫数量は「dbo.Get_Zaiko_Qty_BF」で再計算

【6.3 受注データ消化ルール】
　- FIFO（先入先出）による受注紐付け
　- 同一製品のノンコート受注のみ対象
　- 受注完了時: BRCP_FLG = 1（出荷完了）
　- 部分消化時: 受注数量はそのまま保持

【6.4 トランザクション制御ルール】
　- 出荷データ登録・在庫更新・受注消化を一括処理
　- エラー時の自動ロールバック
　- 成功時のコミット実行

【6.5 データ整合性ルール】
　- 出荷数量と在庫減算の整合性
　- 受注残計算の正確性維持
　- ステータスフラグの適切な管理

■ 7. エラーハンドリング
====================================================================
【7.1 入力検証エラー】
　- 出荷先未選択: 「出荷先を選択してください」
　- 出荷日未入力: 「出荷日を入力してください」
　- 出荷数量エラー: 「出荷数量は1以上を入力してください」
　- 在庫数量超過: 「出荷数量が在庫数量を超えています」

【7.2 業務ルールエラー】
　- 在庫不足: 「在庫数量が不足しています」
　- 在庫データなし: 「指定された在庫データが見つかりません」
　- 重複出荷: 既に出荷済みの在庫への重複出荷制限

【7.3 システムエラー】
　- データベースエラー: 「出荷データ登録中にエラーが発生しました」
　- トランザクションエラー: 「処理中にエラーが発生しました。再度お試しください」
　- 予期せぬエラー: 「システムエラーが発生しました。管理者に連絡してください」

【7.4 エラーログ】
　- 全てのエラーは「log_error」関数でログ出力される
　- データベースエラー、業務エラー等を記録

■ 8. 関連ファイル・関数
====================================================================
【8.1 主要ファイル・関数】

◆ ルーティング
　- ファイル: app/routes.py
　- 関数: create_shipping(), save_shipping()
　- 機能: 出荷作成画面の表示制御と保存処理
　- 認証: @login_required デコレータ

◆ データ処理モデル
　- ファイル: app/models.py
　- クラス: Shipment, PrdDat, BrcpDat
　- 関数: save(), get_by_id(), get_orders(), get_shipping_destinations()
　- 機能: 出荷データの保存・取得業務ロジック

◆ テンプレート
　- ファイル: app/templates/shipping_create.html
　- 機能: 出荷作成画面のHTML表示
　- 継承: base.html

◆ 重要業務関数
　- 関数: dbo.Get_Zaiko_Qty_BF()
　- 機能: 在庫数量計算（製造数量 - 出荷済み数量）
　- 関数: dbo.Get_ODR_ZAN_Qty_BF()
　- 機能: 受注残数量計算（受注数量 - 出荷済み数量）

◆ エラーログ
　- ファイル: app/models.py
　- 関数: log_error()
　- 機能: 統一エラーログ記録

【8.2 データベーステーブル】

◆ BPRD_DAT（製造データテーブル）
　- 主要項目: BPDD_ID, BPDD_PRD_ID, BPDD_LOT, BPDD_PROC, BPDD_FLG
　- 業務用途: 在庫データの管理

◆ BSHK_DAT（出荷データテーブル）
　- 主要項目: BSHK_ID, BSHK_PRD_ID, BSHK_DT, BSHK_QTY, BSHK_SHIP_TO, BSHK_FLG
　- 業務用途: 出荷実績データの格納

◆ BRCP_DAT（受注データテーブル）
　- 主要項目: BRCP_ID, BRCP_DT, BRCP_PRD_ID, BRCP_QTY, BRCP_PROC, BRCP_FLG
　- 業務用途: 受注データの管理・消化

◆ BFSP_MST（BF規格マスタテーブル）
　- 主要項目: BFSP_PRD_ID, BFSP_BASE, BFSP_ADP, BFSP_LR, BFSP_CLR
　- 業務用途: 製品情報の表示

◆ BZTR_MST（取引先マスタテーブル）
　- 主要項目: BZTR_ID, BZTR_NM
　- 業務用途: 出荷先選択肢の提供

【8.3 関連画面・機能】
　- ノンコート在庫検索画面: /noncoat-stock（遷移元）
　- 出荷一覧画面: /shipping_list（登録後確認）
　- ハードコート出荷作成: /shipping/create_hard/<製造ID>（加工用）